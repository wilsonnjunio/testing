# -*- coding: utf-8 -*-
"""SDAB-98_I-CID-04

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15IcwUMFbGkLBEGpHm65mAyW4wJQNxNHz
"""

import numpy as np
import pandas as pd
# import library big query dan google drive
import os
from google.cloud import bigquery
from google.colab import drive
drive.mount('/content/drive')

os.environ["GOOGLE_APPLICATION_CREDENTIALS"]="/content/drive/MyDrive/Dataset2/private-key (2).json"

bqclient = bigquery.Client()

"""MEMASUKKAN DATAFRAME DENGAN MENGGABUNGKAN TABEL EMPLOYEES DENGAN TIMESHEETS MELALUI KOLOM EMPLOYEE_ID KE DALAM GOOGLE COLLAB"""

query_string = """
SELECT
*

 FROM `bitlabs-dab.I_CID_04.employees` em
LEFT JOIN  `bitlabs-dab.I_CID_04.timesheets` ts
 ON em.employe_id=ts.employee_id
"""
df = (
    bqclient.query(query_string)
    .result()
    .to_dataframe(
        # Optionally, explicitly request to use the BigQuery Storage API. As of
        # google-cloud-bigquery version 1.26.0 and above, the BigQuery Storage
        # API is used by default.
    )
)
df

df.info()

"""Mencari Lama kerja per karyawan
1. langkah pertama dengan mengubah kolom check in dan checkout menjadi string agar bisa dipisah hanya jam nya saja
"""

df['checkin'] = pd.to_datetime(df["checkin"].astype(str)).dt.time
df['checkout'] = pd.to_datetime(df["checkout"].astype(str)).dt.time
df['checkin'] = df['checkin'].apply(lambda a: str(a))
df['checkout'] = df['checkout'].apply(lambda b: str(b))
df

"""2. langkah kedua adalah dengan memisah jam check in dan checkout masing masing karyawan"""

df['checkin_perhour'] = df['checkin'].str.split(':').str[0]
df['checkout_perhour'] = df['checkout'].str.split(':').str[0]
df

"""Kemudian untuk menghitung lama kerja, diperlukan untuk menghilangkan nilai non-numerik seperti 'NaT' (Not a Time) atau string lainnya dalam kolom yang harus diubah menjadi numerik, penggunaan errors='coerce' agar dapat melanjutkan proses pengubahan tipe data menjadi numerik tanpa harus terhenti oleh nilai-nilai yang tidak valid"""

df['checkin_perhour'] = pd.to_numeric(df['checkin_perhour'], errors='coerce')
df['checkout_perhour'] = pd.to_numeric(df['checkout_perhour'], errors='coerce')
df

"""Setelah kolom checkout per hour dan checkin per hour menjadi numeric maka dilakukan fungsi agregasi yaitu pengurangan"""

#mencari total jam kerja
df['ttl_workingper_hour'] = df['checkout_perhour'] - df['checkin_perhour']
df

"""Setelah mencari lama jam kerja perkaryawan langkah selanjutnya adalah mencari gaji karywan perjamnya"""

df['salary_hour'] = df['salary'] / df['ttl_workingper_hour']
df

"""setelah mendapatkan total jam kerja tiap karyawan dan jumlah gaji per jam maka langkah selanjutnya adalah dengan menghitung score pembobotan keefektifan sistem gaji karyawan mekari"""

df['salary_hour'] = df['salary_hour'].astype(int)
df['salary_hour'] = df['salary_hour'].apply(lambda a: int(a))
# Sebelum melakukan pembobotan skor terlebih dahulu mengubah kolom salary hour menjadi integer agar hasilnya tidak NaN/dapat melakukan agregasi

"""Setelah itu kita melakukan pembobotan maksimal 100 dan menggunakan kondisi if else jika score kurang dari 50 maka dapat di layoff  """

# ambang batas = 50
max_score = 100
salary_hourmax = df['salary_hour'].max()
df['score'] = (df['salary_hour'] / salary_hourmax) * max_score
df['layoff'] = df['score'].apply(lambda x: 'no' if x < 50 else 'yes')
df

df[df['layoff'] == 'no']

df[df['layoff'] == 'yes']

df.to_csv('datapre.csv', index=False)



"""Maka berdasarkan pembobotan tersebut kita dapat menetapkan terdapat sebesar 303 karyawan yang memiliki gaji yang tidak efektif berdasarkan lama jam kerjasehingga perlu adanya restrukturisasi gaji karyawan untvuk efisensi beban gaji karyawan"""